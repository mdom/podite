#!/usr/bin/perl

use Mojo::Base -strict;

use Mojolicious::Plugin::FeedReader;
use Mojo::URL;
use lib 'lib';
use Mojo::JSON qw(encode_json decode_json);
use Mojo::File 'path';
use Mojo::Util 'encode';
use Text::Wrap 'wrap';
use Config::Tiny;
use Fcntl qw(:flock O_RDWR O_CREAT);
use App::podite;
use App::podite::URLQueue;
use File::stat;

my $ua = Mojo::UserAgent->new( max_redirects => 5 );
$ua->proxy->detect;

my $share_dir  = path("$ENV{HOME}/.local/share/podite/")->make_path;
my $state_file = $share_dir->child('state');
my $cache_dir  = $share_dir->child('cache')->make_path;
my $config     = read_config();

my $download_dir =
  path( $config->{general}->{download_dir} || "$ENV{HOME}/Podcasts" )
  ->make_path;

my ( $fh, $state ) = read_state();

my $mode = shift || 'check';

my %modes = ( check => \&check, );

if ( $modes{$mode} ) {
    $modes{$mode}->(@ARGV);
}

write_state( $fh, $state );

exit 0;

sub subscriptions {
    my %feeds;
    for my $key ( keys %$config ) {
        next if $key eq '_';
        if ( my $url = $config->{$key}->{url} ) {
            $feeds{$key} = $url;
        }
    }
    return %feeds;
}

sub check {
    update();
    my %feeds  = subscriptions();
    my @names  = sort keys %feeds;
    my $reader = Mojolicious::Plugin::FeedReader->new;
    my @download_items;
  Feed:
    for my $name (@names) {
        my $feed  = $reader->parse_rss( $cache_dir->child($name) );
        my @items = @{ $feed->{items} };
      Item:
        while ( my $item = shift @items ) {
            my $decision =
              $state->{subscriptions}->{$name}->{items}->{ $item->{guid} }
              || '';
            if ( $decision eq 'downloaded' or $decision eq 'hidden' ) {
                next;
            }

            ## TODO provide that in Mojo::Feed
            $item->{feed_name} = $name;

            ## TODO terminal escape
            print "\n", encode( 'UTF-8', underline( $item->{title} ) );
            my $summary = render_dom( Mojo::DOM->new( $item->{content} ) );
            if ( length($summary) > 800 ) {
                $summary = substr( $summary, 0, 800 ) . "[SNIP]\n";
            }
            print encode( 'UTF-8', $summary ) . "\n";
            while (1) {
                print "Download this item [y,n,N,s,S,q,?]? ";
                my $key = <STDIN>;
                chomp($key);
                if ( $key eq 'y' ) {
                    push @download_items, $item;
                    next Item;
                }
                elsif ( $key eq 'n' ) {
                    $state->{subscriptions}->{$name}->{items}->{ $item->{guid} }
                      = 'hidden';
                    next Item;
                }
                elsif ( $key eq 'N' ) {
                    for ( $item, @items ) {
                        $state->{subscriptions}->{$name}->{items}
                          ->{ $item->{guid} } = 'hidden';
                    }
                    next Feed;
                }
                elsif ( $key eq 'S' ) {
                    next Feed;
                }
                elsif ( $key eq 'q' ) {
                    last Feed;
                }
                elsif ( $key eq 's' ) {
                    next Item;
                }
                else {
                    print "y - download this item\n"
                      . "n - do not download this item, never ask again\n"
                      . "N - do not download this item or any of the remaining ones\n"
                      . "s - skip this item, ask next time\n"
                      . "S - skip this feed, ask next time\n"
                      . "q - quit, do not download this item or any other\n";
                    next;
                }
            }
        }
    }

    my $q = App::podite::URLQueue->new( ua => $ua );
    for my $item (@download_items) {
        my $feed_name = $item->{feed_name};
        my $url       = Mojo::URL->new( $item->{enclosures}->[0]->{url} );
        my $file =
          $download_dir->child($feed_name)->child( $url->path->parts->[-1] );
        $file->dirname->make_path;
        say "$url -> $file";
        $q->add(
            $url => sub {
                my ( $ua, $tx ) = @_;
                $tx->result->content->asset->move_to($file);
                $state->{subscriptions}->{$feed_name}->{items}
                  ->{ $item->{guid} } = 'downloaded';
                warn "Download $file finished\n";
            }
        );
    }
    $q->wait;
    return;
}

sub underline {
    my $line      = shift;
    my $underline = '=' x length($line);
    return "$line\n$underline\n\n";
}

sub render_dom {
    my $node    = shift;
    my $content = '';

    for ( $node->child_nodes->each ) {
        $content .= render_dom($_);
    }

    if ( is_tag( $node, 'h1' ) ) {
        return underline($content);
    }
    elsif ( $node->tag && $node->tag =~ /^h(\d)$/ ) {
        return ( '#' x $1 ) . " $content\n\n";
    }
    elsif ( $node->type eq 'text' ) {
        $content = $node->content;
        $content =~ s/\.\s\.\s\./.../;
        return '' if $content !~ /\S/;
        return $content;
    }
    elsif ( is_tag( $node, 'a' ) ) {
        my $href = $node->attr('href');
        if ($href) {
            return "\[$content\]\[$href\]";
        }
        return $content;
    }
    elsif ( is_tag( $node, 'location' ) ) {
        return "$content ";
    }
    elsif ( is_tag( $node, 'p' ) ) {
        return Text::Wrap::fill( '', '', $content ) . "\n\n";
    }
    elsif ( is_tag( $node, 'b' ) ) {
        return "*$content*";
    }
    return $content;
}

sub is_tag {
    my ( $node, $tag ) = @_;
    return $node->type eq 'tag' && $node->tag eq $tag;
}

sub update {
    my (@names) = @_;
    my %feeds = subscriptions();
    if ( !@names ) {
        @names = sort keys %feeds;
    }
    my $q = App::podite::URLQueue->new( ua => $ua );
  Feed:
    for my $name (@names) {
        my $url = $feeds{$name};
        if ( !$url ) {
            warn "Unknown feed $name.\n";
            next Feed;
        }
        my $cache_file = $cache_dir->child($name);
        my $tx         = $ua->build_tx( GET => $url );
        if ( -e $cache_file ) {
            my $date = Mojo::Date->new( stat($cache_file)->mtime );
            $tx->req->headers->if_modified_since($date);
        }
        warn "Updating $name.\n";

        $q->add(
            $tx => sub {
                my ( $ua, $tx ) = @_;
                my $res = $tx->result;
                warn "Fetched $name with rc " . $res->code . "\n";
                if ( $res->is_error ) { say $res->message; return; }
                if ( $res->code eq 200 ) {
                    open( my $fh, '>', $cache_file )
                      or die "Can't open cache file $cache_file: $!\n";
                    print $fh $res->body;
                }
            }
        );

    }
    $q->wait;
    return;
}

sub write_state {
    my ( $fh, $state ) = @_;
    seek $fh, 0, 0;
    truncate $fh, 0;
    print {$fh} encode_json($state);
    return;
}

sub read_state {
    sysopen( my $fh, $state_file, O_RDWR | O_CREAT )
      or die "Can't open state file $state_file: $!\n";
    flock( $fh, LOCK_EX | LOCK_NB ) or die "Cannot lock $state_file: $!\n";
    my $content = do { local ($/); <$fh> };
    my $json = decode_json( $content || '{}' );
    return ( $fh, $json );
}

sub read_config {
    my $config_file = "$ENV{HOME}/.podite.conf";
    if ( -e $config_file ) {
        my $config = Config::Tiny->read( $config_file, 'utf8' );
        if ( !$config ) {
            die "Can't read config file: " . Config::Tiny->errstr . "\n";
        }
        return $config;
    }
    return {};
}
